# This file contains example HTTP calls and it also the configuration
# file for the VSCode plugin "REST Client" https://open-vsx.org/extension/humao/rest-client. 

#Add the following to the .env file in this directory:

#API_SERVER=http://localhost:5001/
#AUTH_BEARER_TOKEN = ey...
#USER_ID = <uuid>
#USER_EMAIL = <email>
#USER_PASSWORD = <password>

# Health Check
{{$dotenv API_SERVER}}

# ------------------------------------------------------------------------------
# Auth Endpoint
# ------------------------------------------------------------------------------

### Auth Health Check
# Returns a health check message for the auth endpoint.
{{$dotenv API_SERVER}}/auth/

### auth_current_user()
# Current User. You can get the AUTH_BEARER_TOKEN from the browser's console by looking at 
# a request to graphql-engine. It is only as long-lived as your browser session.
# Returns the current user's Cognito username, email, Hasura claims, and the full decrypted JWT.
{{$dotenv API_SERVER}}/auth/current_user
Authorization: Bearer {{$dotenv AUTH_BEARER_TOKEN}}

### auth_current_user2()
# Similar to /auth/current_user, but uses the @normalize_claims decorator to provide a 
# parsed dictionary of claims. 
# Returns the user's Cognito username, email, and Hasura claims.

{{$dotenv API_SERVER}}/auth/current_user2
Authorization: Bearer {{$dotenv AUTH_BEARER_TOKEN}}

# ------------------------------------------------------------------------------
# Users Endpoint
# ------------------------------------------------------------------------------

# This can be found via the `/users/` endpoint


### Users listing
# Lists all users in the Cognito user pool, excluding those with usernames
# starting with 'azuread_'. Requires a valid user session.
{{$dotenv API_SERVER}}/users/
Authorization: Bearer {{$dotenv AUTH_BEARER_TOKEN}}

### user_get_user()
# Returns detailed information for a specific user, including Cognito user info 
# and their Hasura roles. 
# The USER_ID is the Cognito user ID ("Username" from the user list endpoint). 
# Requires a valid user session.
{{$dotenv API_SERVER}}/users/{{$dotenv USER_ID}}
Authorization: Bearer {{$dotenv AUTH_BEARER_TOKEN}}

### user_create_user()
# Creates a new user. Requires moped-admin role.
# The password must be at least 12 characters and contain at least one uppercase letter,
# one lowercase letter, one number, and one special character.
POST {{$dotenv API_SERVER}}/users/
Authorization: Bearer {{$dotenv AUTH_BEARER_TOKEN}}
Content-Type: application/json

{
    "email": "{{$dotenv USER_EMAIL}}",
    "first_name": "FirstName",
    "last_name": "LastName",
    "is_coa_staff": true,
    "title": "This is a job title",
    "workgroup_id": 1,
    "password": "{{$dotenv USER_PASSWORD}}",
    "roles": [
        "moped-viewer"
    ],
    "is_user_group_member": false,
    "note": "Optional note."
}

### user_update_user()
# Updates a user. Requires moped-admin role. The USER_ID is the Cognito user ID.
# The payload is similar to the create user payload.
# A password is not required unless you want to change it.


PUT {{$dotenv API_SERVER}}/users/{{$dotenv USER_ID}}
Authorization: Bearer {{$dotenv AUTH_BEARER_TOKEN}}
Content-Type: application/json

{
    "email": "{{$dotenv USER_EMAIL}}",
    "first_name": "UpdatedFirstName",
    "last_name": "UpdatedLastName",
    "is_coa_staff": true,
    "title": "This is an updated job title",
    "workgroup_id": 1,
    "roles": [
        "moped-editor"
    ],
    "is_user_group_member": true,
    "note": "This is an updated note.",
    "password": "{{$dotenv USER_PASSWORD}}"
}

### user_activate_user()
# Activates a user that exists in the database but not in Cognito.
# Requires moped-admin role.
PUT {{$dotenv API_SERVER}}/users/activate/
Authorization: Bearer {{$dotenv AUTH_BEARER_TOKEN}}
Content-Type: application/json

{
    "email": "some.user.in.the.database@austintexas.gov",
    "password": "{{$dotenv USER_PASSWORD}}",
    "roles": ["moped-viewer"]
}

### user_delete_user()
# Deletes a user from Cognito and deactivates them in the Moped database.
# The USER_ID is the Cognito user ID. Requires moped-admin role.
DELETE {{$dotenv API_SERVER}}/users/{{$dotenv USER_ID}}
Authorization: Bearer {{$dotenv AUTH_BEARER_TOKEN}}


# ------------------------------------------------------------------------------
# Files Endpoint
# ------------------------------------------------------------------------------


### Files Health Check
{{$dotenv API_SERVER}}/files/


### files_request_signature() for a project
# Requests a pre-signed URL to upload a file to S3 for a specific project.
# The file name should be a valid file name.
# The project_id associates the file with a project.
# The type is optional, it can be 'private' or 'public'. Defaults to 'private'.
{{$dotenv API_SERVER}}/files/request-signature?file=test-project-file.jpg&project_id=1&type=public
Authorization: Bearer {{$dotenv AUTH_BEARER_TOKEN}}

### files_request_signature() for a user
# Requests a pre-signed URL to upload a file to S3 associated with the user.
# The file name should be a valid file name.
# No project_id is provided.
{{$dotenv API_SERVER}}/files/request-signature?file=test-user-file.png&type=private
Authorization: Bearer {{$dotenv AUTH_BEARER_TOKEN}}

### file_download()
# Retrieves a pre-signed URL to download a file from S3.
# The path is the S3 key of the file.
# This path is returned from the files_request_signature endpoint in the `filename` field.
# You would need to replace {{FILE_S3_KEY}} with a real file key from a previous request.
# Example path: private/user/1/some-file.txt
@FILE_S3_KEY = private/city-of-austin-logo.png
GET {{$dotenv API_SERVER}}/files/download/{{FILE_S3_KEY}}
Authorization: Bearer {{$dotenv AUTH_BEARER_TOKEN}}
