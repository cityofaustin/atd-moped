name: "Build Moped API image and push to AWS ECR"
on:
  push:
    # branches:
    # - main
    # - production
    paths:
      - ".github/workflows/build_and_push_api_image.yml"
      - "api/**"
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
jobs:
  build:
    name: Build Moped API docker image
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Determine image tag
        id: determine-tag
        run: |
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "tag=staging" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref_name }}" = "production" ]; then
            echo "tag=production" >> $GITHUB_OUTPUT
          else
            echo "tag=unknown" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY }}:${{ steps.determine-tag.outputs.tag }}
          context: ./api

      - name: Set environment for ECS update
        if: steps.determine-tag.outputs.tag != 'unknown'
        # elif [ "${{ github.ref_name }}" == "main" ]; then
        run: |
          if [ "${{ github.ref_name }}" == "production" ]; then
            echo "ECS_CLUSTER=${{ secrets.ECS_CLUSTER_PRODUCTION }}" >> $GITHUB_ENV
            echo "ECS_SERVICE=${{ secrets.ECS_SERVICE_PRODUCTION }}" >> $GITHUB_ENV
          else
            echo "ECS_CLUSTER=${{ secrets.ECS_CLUSTER_STAGING }}" >> $GITHUB_ENV
            echo "ECS_SERVICE=${{ secrets.ECS_SERVICE_STAGING }}" >> $GITHUB_ENV
          fi

      - name: Force redeploy ECS service
        if: steps.determine-tag.outputs.tag != 'unknown'
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_ECS_CONTROL }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_ECS_CONTROL }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION || 'us-east-1' }}
          ECS_CLUSTER: ${{ env.ECS_CLUSTER }}
          ECS_SERVICE: ${{ env.ECS_SERVICE }}
        run: |
          sleep 30
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment
