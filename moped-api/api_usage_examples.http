# This file contains example HTTP calls and it it also the configuration
# file for the VSCode plugin "REST Client" https://open-vsx.org/extension/humao/rest-client. 

# Add the following into the .vscode/settings.json file to use the environment 
# variables in this file:

# {
#     "rest-client.environmentVariables": {
#         "$shared": {
#             "API_SERVER": "loaclhost",
#             "{{AUTH_BEARER_TOKEN}}": <Token>
#         },
#     }
# }

# TODO, move some of this config into a readme or something

# Health Check
{{API_SERVER}}

### Auth Health Check
{{API_SERVER}}/auth/

### auth_current_user()
# Current User. You can get the AUTH_BEARER_TOKEN from the browser's console by looking at 
# a request to graphql-engine. It is only as long-lived as your browser session.
{{API_SERVER}}/auth/current_user
Authorization: Bearer {{AUTH_BEARER_TOKEN}}

### auth_current_user2()
{{API_SERVER}}/auth/current_user2
Authorization: Bearer {{AUTH_BEARER_TOKEN}}

### Users listing
{{API_SERVER}}/users
Authorization: Bearer {{AUTH_BEARER_TOKEN}}

### user_get_user()
# The USER_ID is the "Username" key from the previous request ðŸ‘†
{{API_SERVER}}/users/{{USER_ID}}
Authorization: Bearer {{AUTH_BEARER_TOKEN}}

### user_create_user()
# Creates a new user. The payload is based on USER_VALIDATION_SCHEMA.
# The password must be at least 12 characters and contain at least one uppercase letter,
# one lowercase letter, one number, and one special character.
POST {{API_SERVER}}/users
Authorization: Bearer {{AUTH_BEARER_TOKEN}}
Content-Type: application/json

{
    "email": "test.user@austintexas.gov",
    "first_name": "FirstName",
    "last_name": "LastName",
    "is_coa_staff": true,
    "title": "This is a job title",
    "workgroup_id": 1,
    "password": "c3st-ne-p@s-un-MOT-de-passe",
    "roles": [
        "moped-viewer"
    ],
    "is_user_group_member": false,
    "note": "Optional note."
}

### user_update_user()
# Updates a user. The USER_ID is the Cognito user ID.
# The payload is similar to the create user payload.
# A password is not required unless you want to change it.

#This hardcoded value is a test user created in our staging environment
PUT {{API_SERVER}}/users/{{USER_ID}}
Authorization: Bearer {{AUTH_BEARER_TOKEN}}
Content-Type: application/json

{
    "email": "test.user@austintexas.gov",
    "first_name": "UpdatedFirstName",
    "last_name": "UpdatedLastName",
    "is_coa_staff": true,
    "title": "This is an updated job title",
    "workgroup_id": 1,
    "roles": [
        "moped-editor"
    ],
    "is_user_group_member": true,
    "note": "This is an updated note."
}

### user_activate_user()
# Activates a user that exists in the database but not in Cognito.
PUT {{API_SERVER}}/users/activate/
Authorization: Bearer {{AUTH_BEARER_TOKEN}}
Content-Type: application/json

{
    "email": "some.user.in.the.database@austintexas.gov",
    "password": "c3st-ne-p@s-un-MOT-de-passe",
    "roles": ["moped-viewer"]
}

### user_delete_user()
# Deletes a user. The USER_ID is the Cognito user ID.
DELETE {{API_SERVER}}/users/{{USER_ID}}
Authorization: Bearer {{AUTH_BEARER_TOKEN}}

### user_update_password()
# Updates a user's password. The USER_ID is the Cognito user ID.
PUT {{API_SERVER}}/users/{{USER_ID}}
Authorization: Bearer {{AUTH_BEARER_TOKEN}}
Content-Type: application/json

{
  "first_name": "FirstName",
  "last_name": "LastName",
  "title": "Fake person",
  "email": "some.user.in.the.database@austintexas.gov",
  "password": "c3st-ne-p@s-un-MOT-de-passe",
  "roles": [
    "moped-admin"
  ],
  "workgroup_id": 3,
  "is_user_group_member": false,
  "note": null
}

###
# ------------------------------------------------------------------------------
# Files Endpoint
# ------------------------------------------------------------------------------


### Files Health Check
{{API_SERVER}}/files/


### files_request_signature() for a project
# Requests a pre-signed URL to upload a file to S3 for a specific project.
# The file name should be a valid file name.
# The project_id associates the file with a project.
# The type is optional, it can be 'private' or 'public'. Defaults to 'private'.
{{API_SERVER}}/files/request-signature?file=test-project-file.jpg&project_id=1&type=public
Authorization: Bearer {{AUTH_BEARER_TOKEN}}

### files_request_signature() for a user
# Requests a pre-signed URL to upload a file to S3 associated with the user.
# The file name should be a valid file name.
# No project_id is provided.
{{API_SERVER}}/files/request-signature?file=test-user-file.png&type=private
Authorization: Bearer {{AUTH_BEARER_TOKEN}}

### file_download()
# Retrieves a pre-signed URL to download a file from S3.
# The path is the S3 key of the file.
# This path is returned from the files_request_signature endpoint in the `filename` field.
# You would need to replace {{FILE_S3_KEY}} with a real file key from a previous request.
# Example path: private/user/1/some-file.txt
@FILE_S3_KEY = private/city-of-austin-logo.png
GET {{API_SERVER}}/files/download/{{FILE_S3_KEY}}
Authorization: Bearer {{AUTH_BEARER_TOKEN}}
