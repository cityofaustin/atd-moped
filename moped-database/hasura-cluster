#!/usr/bin/env bash
#
# Hasura Cluster Tool(kit)
#   This is a tool kit that helps manage the MOPED cluster.
#
# Austin Transportation Department
# Data & Technology Services
#
set -o errexit

# The following two functions need to be defined prior to execution

#
# Detect platform
#
function __get_platform() {
  PLATFORM=$(uname -a | rev | cut -d " " -f1 | rev);

  # overloading the detected platform to work for linux machines
  if [ $PLATFORM = "GNU/Linux" ]
    then
    PLATFORM="x86_64";
    fi

  echo "Detected platform: ${PLATFORM}";
}

function __set_postgresql_image() {
  __get_platform;
  HASURA_CLUSTER_POSTGRES_IMAGE="frankinaustin/postgis:16-3.5";
  echo "Database Docker Image: ${HASURA_CLUSTER_POSTGRES_IMAGE}"
}

HIDE_HASURA_KIT_BANNER="FALSE";
__set_postgresql_image; # into HASURA_CLUSTER_POSTGRES_IMAGE


#
# Check if docker is running
#
function __get_docker_running() {
  docker ps -q &> /dev/null && echo "TRUE" || echo "FALSE";
}


#
# Gets the current hasura cluster status
#
function __get_status() {
  echo $(curl --silent "http://localhost:8080/healthz");
}

#
# Gets the current hasura cluster version
#
function __get_version() {
  echo $(curl --silent "http://localhost:8080/v1/version");
}

#
# Prints TRUE if the current configuration is local
#
function __is_local() {
  grep -q "endpoint: http://localhost:8080" config.yaml && echo "TRUE" || echo "FALSE";
}




#
# Pings the Hasura server, returns True if it is ready to accept connections.
#
function __hasura_server_ready() {
  HASURA_SERVER_STATUS=$(curl --silent http://localhost:8080/v1/version)
  [[ "${HASURA_SERVER_STATUS}" =~ "version" ]] && echo "TRUE" || echo "FALSE";
}

#
# Checks the hasura server output (if any) and checks if it is ready,
# if not, it waits 1 second and tries again (up to 60 seconds)
#
function __wait_server_ready() {
  INITIALIZATION_TIMEOUT_LIMIT=60
  INITIALIZATION_COUNT=1
  while [ "$(__hasura_server_ready)" = "FALSE" ]; do
    echo -ne "Hasura server not ready, please wait. ${INITIALIZATION_COUNT}/${INITIALIZATION_TIMEOUT_LIMIT} üïî\r";
    if [ $INITIALIZATION_COUNT -gt $INITIALIZATION_TIMEOUT_LIMIT ]; then
      echo "Hasura server unavailable"
      exit 1
    fi
    sleep 1
    INITIALIZATION_COUNT=$(($INITIALIZATION_COUNT + 1))
  done
  echo "[Œª] Hasura server ready!                    ‚úÖ";
}


#
# Waits until the local hasura server is ready
#
function run_migration() {
  if [[ "$(__is_local)" != "TRUE" ]]; then
    echo "--------------------------------------------------------------------";
    echo " üõëÔ∏è Non-Local environment detected. Aborting.";
    echo " Switch back to your local environment: './hasura-cluster setenv local'";
    echo "--------------------------------------------------------------------";
    stop;
    exit 1;
  fi;

  CURRENT_STAGE_NAME="";
  echo "--------------------------------------------------------------------";
  echo " ‚ôªÔ∏è  MIGRATIONS STARTED";
  echo "--------------------------------------------------------------------";
  {
    {
      CURRENT_STAGE_NAME="MIGRATE APPLY";
      hasura migrate apply;
    } && {
      CURRENT_STAGE_NAME="METADATA APPLY";
      hasura metadata apply;
    } && {
      CURRENT_STAGE_NAME="SEEDS APPLY";
      hasura seeds apply;
    }
  } || {
    echo "--------------------------------------------------------------------";
    printf " üõëÔ∏è Stopping hasura cluster. Error in stage: \e[31m ${CURRENT_STAGE_NAME}Ô∏è \e[0m\n";
    echo "--------------------------------------------------------------------";
    stop;
    echo "--------------------------------------------------------------------";
    echo -e " ‚ö†Ô∏è  HASURA CLUSTER STOPPED! \n";
    exit 1;
  }
  echo "--------------------------------------------------------------------";
  echo -e " Migrations Finished! \n";
}


#
# Starts the cluster and does NOT run migrations...
#
function start_only() {
  __get_platform;
  START_MODE=$1;
  if [[ "${START_MODE}" = "" ]]; then
    docker compose -f docker-compose.yml up -d;
  else
    docker compose -f "${START_MODE}" up -d;
  fi;

  echo "Checking the Hasura server is ready...";
  __wait_server_ready;
}

#
# Starts the cluster, runs the migrations automatically
#
function start() {
  START_MODE=$1;
  CLONE_FROM_PROFILE=$2;
  if [[ $(__get_status) == "OK" ]]; then
    status;
    echo "The Hasura Cluster is already running...";
    echo " - To stop, try: './hasura-cluster stop'";
    echo -e "- Or try './hasura-cluster console' to open the console.\n";
    exit 0;
  fi;

  # Start Hasura
  start_only $START_MODE;

  run_migration;
  status;
}

#
# Changes the current environment
#
function setenv() {
  ENVIRONMENT=$1
  if [[ "${ENVIRONMENT}" != "production" ]] && [[ "${ENVIRONMENT}" != "staging" ]] && [[ "${ENVIRONMENT}" != "local" ]]; then
    echo "Invalid environment: '${ENVIRONMENT}' (command ignored)";
    exit 0;
  fi

  echo "Switched environment to ${ENVIRONMENT}";
  cat "./config/hasura.${ENVIRONMENT}.yaml" > ./config.yaml;
  echo "current_environment: ${ENVIRONMENT}" >./hasura.current_environment.yaml;
  cat ./hasura.current_environment.yaml
}

#
# Stops the cluster and removes any created volumes
#
function stop() {
  __get_platform;
  docker compose -f docker-compose.yml down --volumes --remove-orphans;
}

#
# Restarts the cluster
#
function restart() {
  echo "--------------------------------------------------------------------";
  echo " ‚≠ï Restarting the Hasura Cluster...Ô∏è";
  echo "--------------------------------------------------------------------";
  stop;
  start;
}

#
# Stops the database, and re-starts without migrations.
#
function reload() {
  echo "--------------------------------------------------------------------";
  echo " ‚ôªÔ∏è Reloading the Hasura Cluster (without migrations)...Ô∏è";
  echo "--------------------------------------------------------------------";
  stop;
  start_only;
}

#
# Removes any volumes whose names start with the string "moped"
#
function prune() {
   docker volume rm $(docker volume ls --filter name=moped* -q);
}

#
# Attaches to the log output of all containers in the cluster
#
function follow() {
  docker compose logs --follow
}

#
# Shows the status of the server (after being started)
#
function status() {
  VERSION=$(__get_version);
  STATUS=$(__get_status);
  MESSAGE=""
  if [[ "${STATUS}" == "OK" ]]; then
    EMOJI="‚úÖ";
    MESSAGE="You may run 'hasura console' now!"
  else
    STATUS=" Unreachable"
    VERSION="?"
    EMOJI="‚ö†Ô∏è";
    MESSAGE="Try './hasura-cluster start' or 'docker ps -a' to check..."
  fi;
  echo -e "\n--------------------------------------------------------------------";
  echo " ‚õÖÔ∏è  Hasura Server Status";
  echo "--------------------------------------------------------------------";
  echo " Status: ${EMOJI} ${STATUS}";
  echo " Version: ${VERSION}";
  echo " ${MESSAGE}";
  echo -e "--------------------------------------------------------------------\n";
}

#
# Run the Hasura Console
#
function console() {
  echo "Starting the Hasura Console... (press Ctrl+C to stop)";
  hasura console;
}

#
# Shows a fancy banner
#
function show_hasura_kit_banner() {
  cat <<HASURA_EOM
‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñÑ
‚ñà‚ñà‚ñë‚ñà‚ñà‚ñë‚ñà‚ñë‚ñÑ‚ñÑ‚ñÄ‚ñà‚ñë‚ñÑ‚ñÑ‚ñà‚ñë‚ñà‚ñà‚ñë‚ñà‚ñë‚ñÑ‚ñÑ‚ñÄ‚ñà‚ñë‚ñÑ‚ñÑ‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñë‚ñÑ‚ñÑ‚ñÄ‚ñà‚ñë‚ñà‚ñà‚ñë‚ñà‚ñà‚ñë‚ñà‚ñë‚ñÑ‚ñÑ‚ñà‚ñÑ‚ñë‚ñÑ‚ñà‚ñë‚ñÑ‚ñÑ‚ñà‚ñë‚ñÑ‚ñÑ‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñë‚ñà‚ñÄ‚ñÑ‚ñà‚ñà‚ñÑ‚ñà‚ñà‚ñÑ‚ñë‚ñÑ‚ñà‚ñà
‚ñà‚ñà‚ñë‚ñÑ‚ñÑ‚ñë‚ñà‚ñë‚ñÄ‚ñÄ‚ñë‚ñà‚ñÑ‚ñÑ‚ñÄ‚ñà‚ñë‚ñà‚ñà‚ñë‚ñà‚ñë‚ñÄ‚ñÄ‚ñÑ‚ñà‚ñë‚ñÄ‚ñÄ‚ñë‚ñà‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñë‚ñà‚ñà‚ñë‚ñà‚ñÑ‚ñÑ‚ñÄ‚ñà‚ñà‚ñë‚ñà‚ñà‚ñë‚ñÑ‚ñÑ‚ñà‚ñë‚ñÄ‚ñÄ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñë‚ñÑ‚ñÄ‚ñà‚ñà‚ñà‚ñë‚ñÑ‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà
‚ñà‚ñà‚ñë‚ñà‚ñà‚ñë‚ñà‚ñÑ‚ñà‚ñà‚ñÑ‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñÑ‚ñà‚ñÑ‚ñÑ‚ñà‚ñÑ‚ñà‚ñà‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñë‚ñÄ‚ñÄ‚ñÑ‚ñà‚ñÑ‚ñÑ‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñÑ‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñÑ‚ñà‚ñÑ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñë‚ñà‚ñà‚ñë‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñÑ‚ñà‚ñà‚ñà
‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ‚ñÄ
HASURA_EOM
}

function show_banner() {
  show_hasura_kit_banner;
  printf " Hasura Cluster: \e[32m $1 $2 $3 $4\e[0m\n";
  echo "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -";
}

function __check_export_complete() {
  local file_path="$1"
  local last_line=$(tail -n 3 "$file_path" | head -n 1)
  
  if [[ "$last_line" == *"PostgreSQL database dump complete"* ]]; then
    # echo "PostgreSQL database export is complete."
    return 0
  else
    # echo "PostgreSQL database export is not complete."
    return 1
  fi
}

function replicate() {
  source ./env;
  stop;
  start_only;
  mkdir -p ./snapshots;

  # Get the current date in YYYY-MM-DD format
  current_date=$(date +"%Y-%m-%d");
  snapshot_file="./snapshots/production-$current_date.sql";

  # If use_any_snapshot is true, use the most recent snapshot
  if $use_any_snapshot; then
    snapshot_file="./snapshots/$(ls -t ./snapshots | head -n 1)"
    echo "Using most recent snapshot $snapshot_file"
  fi

  # Check if the file already exists and the export is complete
  if ! __check_export_complete "$snapshot_file"; then
    echo "Replicating production database to local database... (~ 2-4 minutes)";
    docker exec -it \
    -e PGPASSWORD=$MOPED_RR_PASSWORD  \
    moped-database-moped-pgsql-1 \
    pg_dump \
    -U $MOPED_RR_USERNAME \
    -h $MOPED_RR_HOST \
    $MOPED_RR_DB > $snapshot_file;
    
    # Check if the export is complete
    if __check_export_complete "$snapshot_file"; then
      echo "Replication successful.";
    else
      echo "Replication failed. The export is not complete.";
      return 1;
    fi
  else
    echo "Snapshot file $snapshot_file already exists, skipping replication. Delete this file to get fresh data.";
  fi;

  docker stop moped-database-hasura-1;
  echo 'DROP DATABASE moped; CREATE DATABASE moped' | docker exec -i moped-database-moped-pgsql-1 psql -U moped postgres;
  docker exec -i moped-database-moped-pgsql-1 psql -U moped moped < $snapshot_file;
  docker start moped-database-hasura-1;
  __wait_server_ready;
  hasura migrate apply;
  hasura metadata apply;
}

use_any_snapshot=false

# Process named arguments
while (( "$#" )); do
  case "$1" in
    -j|--use-any-snapshot)
      use_any_snapshot=true
      shift
      ;;
    *)
      # Save positional arguments in an array
      positional_args+=("$1")
      shift
      ;;
  esac
done

#
# Let's make sure docker is running...
#
if [[ "$(__get_docker_running)" != "TRUE" ]]; then
    show_banner "${positional_args[0]}" && echo "Docker is not running. Please start docker on your computer"
  exit;
fi;

# Do the job
if [[ "${HIDE_HASURA_KIT_BANNER}" != "TRUE" ]]; then
  show_banner "${positional_args[0]}" && "${positional_args[0]}" "${positional_args[@]:1}";
else
  echo "Hasura Cluster: ${positional_args[0]}" && "${positional_args[0]}" "${positional_args[@]:1}";
fi;
