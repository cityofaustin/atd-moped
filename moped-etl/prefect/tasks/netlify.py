import os
import json
import requests

import prefect
from prefect import task
import pprint as pretty_printer
from datetime import timedelta

logger = prefect.context.get("logger")

NETLIFY_BUILD_HOOK = os.environ["NETLIFY_BUILD_HOOK"]
NETLIFY_ACCESS_TOKEN = os.environ["NETLIFY_ACCESS_TOKEN"]
NETLIFY_SITE_ID = os.environ["NETLIFY_SITE_ID"]
NETLIFY_API_URL = os.environ["NETLIFY_API_URL"]
NETLIFY_SEARCH_BACK_DISTANCE_FIND_BUILDS = os.environ["NETLIFY_SEARCH_BACK_DISTANCE_FIND_BUILDS"]


def pprint(string):
    print("")
    pp = pretty_printer.PrettyPrinter(indent=2)
    pp.pprint(string)
    print("")


@task(
    name="Check if build is complete", max_retries=24, retry_delay=timedelta(seconds=10)
)
def netlify_check_build(branch, build_token):
    logger.info("Checking netlify build")

    URL = NETLIFY_API_URL + "sites/" + NETLIFY_SITE_ID + "/deploys"
    headers = {"Authorization": "Bearer " + NETLIFY_ACCESS_TOKEN}
    parameters = {
        "page": 1,
        "per_page": NETLIFY_SEARCH_BACK_DISTANCE_FIND_BUILDS,
    }

    request = requests.request("GET", URL, headers=headers, params=parameters)
    response = json.loads(request.text)

    id = None
    state = None

    for deployment in response:
        if deployment["branch"] == branch:
            id = deployment["id"]
            state = deployment["state"]
            # pprint(deployment)
            break

    if state != "ready":
        raise Exception("Build is not ready")

    return True


@task
def trigger_netlify_build(branch):
    logger.info("Triggering netlify build")

    HTTP_parameters = {
        "trigger_branch": branch,
        "trigger_title": "Test Build of " + branch,
    }

    # These environment variables are not secrets, but some should be...
    # They are drawn from /moped-editor/.env-cmdrc, and are the environment
    # variables which must be available to the netlify build process. They configure the app.
    # Many of these will be overloaded by values generated by the test deployment.

    ENV = {
        "REACT_APP_AWS_COGNITO_REGION": "us-east-1",
        "REACT_APP_AWS_COGNITO_USER_POOL_ID": "us-east-1_U2dzkxfTv",
        "REACT_APP_AWS_COGNITO_APP_CLIENT_ID": "3u9n9373e37v603tbp25gs5fdc",
        "REACT_APP_HASURA_ENDPOINT": "https://moped-graphql-staging.austinmobility.io/v1/graphql",
        "REACT_APP_API_ENDPOINT": "https://moped-api-staging.austinmobility.io",
        "REACT_APP_HASURA_ENV": "netlify",
        "REACT_APP_AWS_CLOUDFRONT": "https://moped-pr-local.austinmobility.io",
        "REACT_APP_AWS_COGNITO_REDIRECT_SIGN_IN": "https://moped.austinmobility.io/moped/session/signin",
        "REACT_APP_AWS_COGNITO_REDIRECT_SIGN_OUT": "https://moped.austinmobility.io/moped/session/signin",
        "REACT_APP_AWS_COGNITO_DOMAIN": "atd-moped-staging.auth.us-east-1.amazoncognito.com",
        "REACT_APP_MAPBOX_TOKEN": "pk.eyJ1Ijoiam9obmNsYXJ5IiwiYSI6ImNraWV4dHR0ZjAwNnYyd3FwYjFoNHduaDcifQ.--3vRm2KHq1gh5K_L0pqtA",
        "REACT_APP_NEARMAP_TOKEN": "NWE1ZTA1YTYtOTg4Yy00ZGNhLWFjMzYtMmYxOTI2M2UyODRk",
        "REACT_APP_KNACK_DATA_TRACKER_SCENE": 514,
        "REACT_APP_KNACK_DATA_TRACKER_PROJECT_VIEW": 3089,
        "REACT_APP_KNACK_DATA_TRACKER_SIGNAL_VIEW": 1483,
        "REACT_APP_KNACK_DATA_TRACKER_APP_ID": "621958d0b5ab96001edcb4b1",
        "REACT_APP_KNACK_DATA_TRACKER_PROJECT_ID_FIELD": "field_4133",
        "REACT_APP_KNACK_DATA_TRACKER_PROJECT_NAME_FIELD": "field_3857",
        "REACT_APP_KNACK_DATA_TRACKER_CURRENT_STATUS_FIELD": "field_4136",
        "REACT_APP_KNACK_DATA_TRACKER_SIGNAL_CONNECTION": "field_3861",
        "REACT_APP_KNACK_DATA_TRACKER_MOPED_URL": "field_4161",
        "REACT_APP_KNACK_DATA_TRACKER_MOPED_LINK_LABEL": "field_4162",
        "REACT_APP_KNACK_DATA_TRACKER_URL_BASE": "https://mobility.austin.gov/moped/projects/"
    }

    environment = json.dumps(ENV)

    response = requests.request("POST", NETLIFY_BUILD_HOOK, params=environment)

    # pprint(response.status_code)
    # pprint(response.headers)
    # pprint(response.text)

    return response
